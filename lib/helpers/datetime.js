// Generated by CoffeeScript 1.6.1
(function() {

  module.exports = function(registerHelper) {
    var distance_of_time_in_words, floor, helpers, htmltag, months, pad, plural, to_date, to_datetime, to_object, weeks;
    helpers = this.get('helpers');
    weeks = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
    months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];
    pad = function(n) {
      if (n < 10) {
        return "0" + n;
      } else {
        return n;
      }
    };
    plural = function(int, words) {
      var options;
      options = {
        words: words
      };
      return "" + int + " " + (helpers.helper_plural(int, options));
    };
    floor = function(int) {
      return Math.floor(int);
    };
    to_object = function(object) {
      if (typeof object === 'string') {
        object = new Date(object);
      }
      return object;
    };
    distance_of_time_in_words = function(to, from) {
      var minutes, seconds;
      seconds = (to - from) / 1000;
      minutes = floor(seconds / 60);
      if (minutes === 0) {
        return 'меньше минуты назад';
      }
      if (minutes === 1) {
        return 'минута назад';
      }
      if (minutes < 5) {
        return plural(minutes, ['минута', 'минуты', 'минут']) + ' назад';
      }
      if (minutes < 45) {
        return plural(minutes, ['минута', 'минуты', 'минут']) + ' назад';
      }
      if (minutes < 90) {
        return 'около часа назад';
      }
      if (minutes < 1440) {
        return 'около ' + plural(floor(minutes / 60), ['часа', 'часов', 'часов']) + ' назад';
      }
      if (minutes < 2880) {
        return 'день назад';
      }
      if (minutes < 43200) {
        return plural(floor(minutes / 1440), ['день', 'дня', 'дней']) + ' назад';
      }
      if (minutes < 86400) {
        return 'около месяца назад';
      }
      if (minutes < 525960) {
        return plural(floor(minutes / 43200), ['месяц', 'месяца', 'месяцев']) + ' назад';
      }
      if (minutes < 1051199) {
        return 'около года назад';
      }
      return plural(floor(minutes / 525960), ['год', 'года', 'лет']) + ' назад';
    };
    to_date = function(date, humane) {
      date = to_object(date);
      if (humane === true) {
        return weeks[date.getDay()] + ', ' + date.getDate() + ' ' + months[date.getMonth()] + ', ' + date.getFullYear();
      } else {
        return date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate());
      }
    };
    to_datetime = function(date, humane) {
      date = to_object(date);
      if (humane === true) {
        return distance_of_time_in_words(new Date, date);
      } else {
        return date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes());
      }
    };
    htmltag = function(date, text) {
      date = to_object(date);
      return '<time datetime="' + date.toISOString() + '">' + text + '</time>';
    };
    /*
    # Helpers
    */

    registerHelper('helper_date', function(date, options) {
      var text;
      if (options == null) {
        options = {};
      }
      options = options.hash != null ? options.hash : options;
      text = to_date(date, options.humane === true);
      if ((options.html != null) && options.html === true) {
        return htmltag(date, text);
      } else {
        return text;
      }
    });
    registerHelper('helper_datetime', function(date, options) {
      var text;
      if (options == null) {
        options = {};
      }
      options = options.hash != null ? options.hash : options;
      text = to_datetime(date, options.humane === true);
      if ((options.html != null) && options.html === true) {
        return htmltag(date, text);
      } else {
        return text;
      }
    });
    registerHelper('helper_year', function() {
      var today;
      today = new Date;
      return today.getFullYear();
    });
    return registerHelper('helper_plural', function(count, options) {
      var rest;
      if (options == null) {
        options = {};
      }
      options = options.hash != null ? options.hash : options;
      if (!options.words || options.words.length !== 3) {
        throw new Error('Количество словоформ должно быть 3');
      }
      count = Math.abs(count) % 100;
      rest = count % 10;
      if (count > 10 && count < 20) {
        return options.words[2];
      }
      if (rest > 1 && rest < 5) {
        return options.words[1];
      }
      if (rest === 1) {
        return options.words[0];
      }
      return options.words[2];
    });
  };

}).call(this);
